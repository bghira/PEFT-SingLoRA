name: Release and Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 0.1.1)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string
        default: 'New release'

jobs:
  update-version-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tomlkit
    
    - name: Update version in files
      run: |
        python - << 'EOF'
        import tomlkit
        import re
        import sys
        
        version = "${{ github.event.inputs.version }}"
        
        # Update pyproject.toml
        with open("pyproject.toml", "r") as f:
            doc = tomlkit.load(f)
        
        doc["project"]["version"] = version
        
        with open("pyproject.toml", "w") as f:
            tomlkit.dump(doc, f)
        
        print(f"✓ Updated pyproject.toml to version {version}")
        
        # Update __init__.py
        init_file = "src/peft_singlora/__init__.py"
        with open(init_file, "r") as f:
            content = f.read()
        
        # Replace version string
        content = re.sub(
            r'__version__ = "[^"]*"',
            f'__version__ = "{version}"',
            content
        )
        
        with open(init_file, "w") as f:
            f.write(content)
        
        print(f"✓ Updated {init_file} to version {version}")
        
        # Update CHANGELOG.md (add new version section)
        with open("CHANGELOG.md", "r") as f:
            changelog = f.read()
        
        # Add new version section if not exists
        if f"## [{version}]" not in changelog:
            date = __import__("datetime").datetime.now().strftime("%Y-%m-%d")
            new_section = f"\n## [{version}] - {date}\n\n### Changed\n- ${{ github.event.inputs.release_notes }}\n"
            
            # Insert after the header
            lines = changelog.split("\n")
            for i, line in enumerate(lines):
                if line.startswith("## ["):
                    lines.insert(i, new_section)
                    break
            
            with open("CHANGELOG.md", "w") as f:
                f.write("\n".join(lines))
            
            print(f"✓ Updated CHANGELOG.md with version {version}")
        
        EOF
    
    - name: Commit version updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml src/peft_singlora/__init__.py CHANGELOG.md
        git commit -m "Bump version to ${{ github.event.inputs.version }}"
        git push
    
    - name: Create and push tag
      run: |
        git tag -a "v${{ github.event.inputs.version }}" -m "${{ github.event.inputs.release_notes }}"
        git push origin "v${{ github.event.inputs.version }}"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release v${{ github.event.inputs.version }}
        body: ${{ github.event.inputs.release_notes }}
        draft: false
        prerelease: false
    
    - name: Build package
      run: |
        pip install build
        python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine check dist/*
        twine upload dist/*
